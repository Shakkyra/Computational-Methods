#Diego Sebastian García Cabrera A01634071
#Implementation of Computational Methods

#Lab02: EQUIVALENCE WITH FINITE AUTOMATA

#Definition of classes: RegularExpression, State

from graphviz import Digraph

class RegularExpression:
  def __init__(self, expression):
    self.expression = expression

class State:
  def __init__(self, name, transitions):
    self.name = name
    self.transitions = transitions

def regex_to_nfa(regex):
  initial_state = State(0, {})
  final_state = State(1, {})
  current_state = initial_state
  state_counter = 1

  for symbol in regex:
    if symbol == '(':
      new_initial_state, new_final_state = regex_to_nfa(regex)
      current_state.transitions[''] = new_initial_state
      new_final_state.transitions[''] = final_state
      current_state = new_final_state
    elif symbol == ')':
      break
    elif symbol == '*':
      new_initial_state = State(state_counter, {})
      state_counter += 1
      new_final_state = State(state_counter, {})
      state_counter += 1

      new_initial_state.transitions[''] = current_state
      current_state.transitions[''] = new_final_state

      new_initial_state.transitions[''] = new_final_state
      new_final_state.transitions[''] = new_initial_state

      current_state = new_final_state
    elif symbol == '|':
      new_initial_state = State(state_counter, {})
      state_counter += 1
      new_final_state = State(state_counter, {})
      state_counter += 1

      old_initial_state = initial_state
      initial_state = new_initial_state

      old_final_state_transitions = final_state.transitions
      final_state.transitions = {}
      final_state.transitions[''] = new_final_state
      old_final_state_transitions[''] = new_final_state

      new_initial_state.transitions[''] = old_initial_state
      new_initial_state.transitions[''] = current_state

      current_state.transitions[''] = final_state

      current_state = new_final_state
    else:
      next_state = State(state_counter, {})
      state_counter += 1
      current_state.transitions[symbol] = next_state
      current_state = next_state

  final_state.name = state_counter
  current_state.transitions[''] = final_state

  return initial_state, final_state

def nfa_to_dot(initial_state, final_state, log_file):
  # Generates a Graphviz representation of an NFA.

  dot = Digraph(comment='NFA')

  states = set()
  queue = [initial_state]
  while queue:
    state = queue.pop()
    states.add(state)
    for symbol, next_state in state.transitions.items():
      dot.edge(state.name, next_state.name, label=symbol)
      if next_state not in states:
        queue.append(next_state)
    for state in states:
      if state == initial_state:
        dot.node(state.name, shape='doublecircle')
      elif state == final_state:
        dot.node(state.name, shape='doublecircle')
      else:
        dot.node(state.name)
    # Open the log file in write mode and write the graphviz string to the file
    with open(log_file, 'w') as file:
      file.write(dot.source)
    return dot.source


# Test the program with the given regular expression
initial_state, final_state = regex_to_nfa("(ab ∪ a)*")
print(nfa_to_dot(initial_state, final_state, "nfa.log"))
