#Diego Sebastian García Cabrera A01634071
#Implementation of Computational Methods

#Lab02: EQUIVALENCE WITH FINITE AUTOMATA

#Definition of classes: RegularExpression, State

class RegularExpression:
  def __init__(self, expression):
    self.expression = expression

class State:
  def __init__(self, name, transitions):
    self.name = name
    self.transitions = transitions

def equivalence(reg):
  i_state = State(0, {})
  f_state = State(1, {})
  curr_state = i_state
  state_counter = 1
  for symb in reg:
    if symb == '(':
      new_initial_state, new_final_state = equivalence(reg)
      curr_state.transitions[''] = new_initial_state
      new_final_state.transitions[''] = f_state
      curr_state = new_final_state
    elif symb == ')':
      break
    elif symb == '*':
      new_initial_state = State(state_counter, {})
      state_counter += 1
      new_final_state = State(state_counter, {})
      state_counter += 1
      new_initial_state.transitions[''] = curr_state
      curr_state.transitions[''] = new_final_state
      new_initial_state.transitions[''] = new_final_state
      new_final_state.transitions[''] = new_initial_state
      curr_state = new_final_state
    elif symb == '|':
      new_initial_state = State(state_counter, {})
      state_counter += 1
      new_final_state = State(state_counter, {})
      state_counter += 1
      old_initial_state = i_state
      i_state = new_initial_state
      old_final_state_transitions = f_state.transitions
      f_state.transitions = {}
      f_state.transitions[''] = new_final_state
      old_final_state_transitions[''] = new_final_state
      new_initial_state.transitions[''] = old_initial_state
      new_initial_state.transitions[''] = curr_state
      curr_state.transitions[''] = f_state
      curr_state = new_final_state
    else:
      next_state = State(state_counter, {})
      state_counter += 1
      curr_state.transitions[symb] = next_state
      curr_state = next_state

  f_state.name = state_counter
  curr_state.transitions[''] = final_state
  return i_state, f_state

initial_state, final_state = equivalence("(ab ∪ a)*")
